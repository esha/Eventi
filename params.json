{"name":"Eventi","tagline":"Unlocking the potential of event-based development.","body":"# Eventi\r\n\r\nPowerful application events, made easy.\r\n\r\n## Getting Started\r\nDownload the [minified version][min] or the [development version][max].\r\n\r\n[min]: https://raw.github.com/nbubna/Eventi/master/dist/Eventi.min.js\r\n[max]: https://raw.github.com/nbubna/Eventi/master/dist/Eventi.js\r\n\r\n## Motive\r\n\r\n* JavaScript development is ultimately event-based development.\r\n* Application events (aka custom events) are usually under-used or poorly-used in webapps.\r\n* Events are the best way to decouple modules and components without isolating them entirely.\r\n* DOM event bubbling, in particular, has much potential for meaningful event based interfaces.\r\n* Environment events get simple types and rich data, not the mushed-up 'nounVerbAdjective' types with poor data that most heavy custom event users end up using.\r\n* Custom events can be awesome, especially when you have rich features and patterns that are simple to use.\r\n* Declarative events are completely unsupported out there. This is a travesty.\r\n\r\n## Goal\r\n* A rich event platform that's easy to use and to extend.\r\n* A declarative syntax for working with rich, informative events.\r\n* DOM and object support\r\n* Handling for complex event types (combos, async sequences, singletons, etc).\r\n* Robust, error tolerant listener execution\r\n* Support for best-practices like \"signals\" (aka pre-defined types) and declarative event mapping\r\n* Lots of solid, maintainable test code\r\n* Impressive, interactive demo (ideas, anyone?)\r\n* Three versions (tall, grande, venti): tall is frame/core/fire/on, grande adds declare/singleton/key/location, venti adds off/until/combo/types\r\n* Venti is the default version to encourage much event-based awesomeness for everyone.\r\n* Grande includes basic webapp tools.\r\n* Tall could be enough for light server-side work.\r\n\r\n## Code Organization\r\n\r\n#### Eventi.frame (useless on its own)\r\n* external IIFE\r\n* universal module definition\r\n* CustomEvent constructor polyfill\r\n* body is resolved to build tool specified (sub)set of the following content\r\n\r\n#### core.js (not much use on its own)\r\n* rich event syntax parsing: `Eventi(\"group:kind#label('val')\")` -> `{ category:'group', type:'kind', tags:['label'], label:true, detail:'val' }`\r\n* parser should be extensible (for supporting jQuery namespaces or keyCodes or whatever)\r\n* detail can be resolvable reference, string, or limited json (no parentheses)\r\n* interface sharing (pass `this` as `target` param to copied functions): `Eventi.fy(foo)` -> `foo.fire('type')`\r\n* add stopImmediatePropagation and immediatePropagationStopped to event interface\r\n\r\n#### on.js (requires core.js)\r\n* simple event registration: `Eventi.on([target, ]'type', fn)`\r\n* space delimited multiple registration: `Eventi.on([target, ]'first second third', fn)`\r\n* filter by category and/or tag: `Eventi.on([target, ]\"category:type#tag\", fn)`\r\n* bind data w/listener: `Eventi.on([target, ]'type', fn, data)`\r\n* applying rich event data as listener arg(s): `Eventi.on([target, ]'type', function(e, arg, arg){})`\r\n* implementation: one listener per target that gets registered for every handled type. the listener handles each event by looking amongst its handlers for those that match the event and executing them\r\n\r\n#### fire.js (requires core.js, uses on.js)\r\n* object or DOM custom event dispatch: `Eventi.fire(Node|object, 'type')`\r\n* handler errors caught and thrown in next tick to avoid interrupting sibling handlers or hiding errors\r\n* implicit global target: `Eventi.fire('type')` === `Eventi.fire(document || this, 'type')\r\n* multiple target specification: `Eventi.fire(Array|NodeList, 'type')`\r\n* fire with handler arguments `Eventi.fire([target, ]'type', data)`\r\n* TODO: consider non-DOM propagation when typeof object.parent === \"object\"\r\n\r\n\r\n#### delegate.js (requires on.js)\r\n* alias Element.prototype.matches from the prefixed matchesSelector versions\r\n* filter by selector (aka delegation): `Eventi.on([target, ]'type<.selector>', fn)`\r\n\r\n#### declare.js (requires on.js and fire.js)\r\n* declare `data-eventi=\"submit /beforeunload=quit\"` on a root or container element\r\n* declare specific responses on descendent(s): `submit=\"validate>save\" quit=\"Utils.persist\"`\r\n* try to resolve attr values at call-time to either element or global function (declared event handler)\r\n* otherwise, fire as application event (declared event mapping)\r\n* impl should scan document for data-eventi attributes on DOMContentLoaded, register those listeners\r\n* `click=\"...\"` is globally supported by default using trigger.js' intelligent click/enter logic\r\n\r\n#### singleton.js (requires fire.js and on.js)\r\n* singleton events (immediately call late listeners, ignore multiple firings)\r\n* \"listen\" for them: `Eventi.on([target, ]'^type', fn)`\r\n* fire them so they're remembered: `Eventi.fire([target, ]'^type', fn)`\r\n* alias DOMContentLoaded to '^ready'\r\n\r\n#### key.js (requires on.js)\r\n* filter key events: `Eventi.on([target, ]'keyup[shift-a]', fn)`\r\n\r\n#### location.js (requires on.js and fire.js)\r\n* event-based routing: `Eventi.on('location@?view={view}', function(e, url, params){ console.log(params.view); })`\r\n* event-based history.pushState: `Eventi.fire('location@?view={0}', ['foo'])`\r\n* consistent event for all popstate/hashchange/pushstate changes: `Eventi.on('location', function(e){ console.log(e.location, e.oldLocation, e.srcEvent); })`\r\n\r\n\r\n#### off.js (requires on.js)\r\n* simple listener removal: `Eventi.off([target, ]['type', ][fn])`\r\n* multiple removal: `Eventi.off([target, ]['first second third', ][fn])`\r\n* remove by category and/or tag: `Eventi.off([target, ]['category:type#tag', ][fn])`\r\n\r\n#### end.js (requires on.js)\r\n* this will remove handlers once the specified condition is satisfied\r\n* number of executions: `Eventi.on([target, ]'type$3', fn)`\r\n* test ref for truthiness: `Eventi.on([target, ]'type$reference', fn)`\r\n* call function for truthiness: `Eventi.on([target, ]'type$test.fn', fn)`\r\n\r\n#### sequence.js (requires fire.js)\r\n* fire controllable sequence of events: `Eventi.fire([target, ]'first,second'[, data...])`\r\n* event sequence firing controls (w/async support via promises): `e.pauseSequence([promise])`,`e.resumeSequence()`, `e.isSequencePaused()`\r\n\r\n#### combo.js (requires on.js and off.js)\r\n* combo events (call after all specified events, then reset): `Eventi.on([target, ]'foo+bar', fn)`\r\n* event sequences (ordered combos): `Eventi.on([target, ]'one,two,three', fn...)`\r\n* configurable timeout for combo events: `Eventi.on([target, ]'one,two', fn, 1000)`\r\n\r\n#### alias.js (requires core and declare.js)\r\n* provide both global and local type specification with minimal API\r\n* global: `Eventi.alias('type');` -> `Eventi.on.type([target, ]handler)`\r\n* local (after Eventi.fy(o)): `Eventi.alias(o, 'type', 'type2')` -> `target.until.type2(1, handler)`\r\n* obviously, aliases cannot have the same name as Function properties like 'call' or 'length'\r\n\r\n\r\n## TODO\r\n* documentation\r\n* demo app/site\r\n* integrations (jQuery, Visual Event 2, Capo, etc)\r\n* consider limited grouping syntax for types with partial overlap: `group:{type#tag other$1}#tag2` but probably don't bother due to incompatibility w/aliasing and current parsing\r\n* consider wildcard * syntax, to require a match field presence instead of equality, or possibly partial equality. but resist doing it, as this could get out of hand...\r\n\r\n#### Plan for jquery.eventi.js\r\n* add custom properties to $.event.props\r\n* add namespace support to rich syntax (reluctantly)\r\n* listen for events in jQuery's manual bubbling system\r\n* wrap $.fn.trigger, $.fn.on, $.fn.off, and $.fn.one to intercept calls with Eventi syntax\r\n\r\n\r\n## Release History\r\n* 2014-02-11 [v0.5.0][] (alpha)\r\n* 2014-04-03 [v1.0.0][] (beta)\r\n\r\n[v0.5.0]: https://github.com/nbubna/Eventi/tree/0.5.0\r\n[v1.0.0]: https://github.com/nbubna/Eventi/tree/1.0.0\r\n","google":"UA-42479338-2","note":"Don't delete this file! It's used internally to help with page regeneration."}